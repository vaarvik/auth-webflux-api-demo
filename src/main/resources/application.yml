spring:
  datasource:
    url: jdbc:postgresql://localhost:5438/auth?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
    username: postgres
    password: password

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  security:
    basic:
      enabled: false
    oauth2:
      client:
        registration:
          google:
            clientId: 5014057553-8gm9um6vnli3cle5rgigcdjpdrid14m9.apps.googleusercontent.com
            clientSecret: tWZKVLxaD_ARWsriiiUFYoIk
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
    tokenCookie: "session_token"
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080 # Change this to work on selected domains only
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    redirectUriAfterLoginParam: redirect_uri
    fallbackRedirectUri: http://localhost:3000
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - http://localhost:3000
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect